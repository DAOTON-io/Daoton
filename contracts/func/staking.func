(int, int, int, int) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_uint(64), ;; token_id
     ds~load_uint(64), ;; total_balance
     ds~load_uint(64), ;; stake_amount_request
     ds~load_uint(64) ;; already_staked_amount
     );
}

() save_data(int total_balance, int already_staked_amount) impure inline {
  set_data(begin_cell()
    .store_uint(total_balance, 64)
    .store_uint(already_staked_amount, 64)
    .end_cell());
}


() recv_internal(cell in_msg_cell, slice in_msg_body) impure {
  ;;  Ignore empty messages
  if (in_msg_body.slice_empty?()) { 
    return (); 
  }

  ;;  Initialize data
  var (token_id, total_balance, stake_amount_request, already_staked_amount) = load_data();
  ;;  Get sender address
  var cs = in_msg_cell.begin_parse();
  slice s_addr = cs~load_msg_addr();
  (int sender_wc, slice sender_addr) = parse_var_addr(s_addr);
  int member = sender_addr~load_uint(256);

  ;;  Get token balance
  var [balance, extra] = get_balance();
  ;;  Define operation, transform the message sent to an uint32 integer
  int op = in_msg_body~load_uint(32);

  ;;  Select an operation for staking 0 or unstaking 1
  if (op == 0) {
    ;;  Stake only if there is enough coins unstaked
    if (stake_amount_request <= total_balance) {
      total_balance -= stake_amount_request;
      already_staked_amount += stake_amount_request;
    }
  }
  if (op == 1) {
    ;;  Unstake only if the requested amount does not past the already staked amount
    if (already_staked_amount <= stake_amount_request) {
      total_balance += stake_amount_request;
      already_staked_amount -= stake_amount_request;
    }
  }

  ;;  Save new data to staking contract
  save_data(total_balance, already_staked_amount);
}


(int, int, int) get_total() method_id {
  var (token_id, total_balance, _, already_staked_amount) = load_data();
  return (token_id, total_balance, already_staked_amount);
}
