(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

(int, int, int) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_uint(64), ;; positive
     ds~load_uint(64), ;; negative
     ds~load_uint(64) ;; contract_time_of_deployment
     );
}

() save_data(int positive, int negative, int contract_time_of_deployment) impure inline {
  set_data(begin_cell()
    .store_uint(positive, 64)
    .store_uint(negative, 64)
    .store_uint(contract_time_of_deployment, 64)
    .end_cell());
}


() recv_internal(cell in_msg, slice in_msg_body) impure {
  ;;  Ignore empty messages
  if (in_msg_body.slice_empty?()) { 
    return (); 
  }

  ;;  Define operation, transform the message sent to an uint32 integer
  int op = in_msg_body~load_uint(32);
  
  ;;  Get a cell from c4 register and turn it into a slice (Persistent storage)
  var (positive, negative, contract_time_of_deployment) = load_data();

  ;;  Get sender address
  slice sender_address = cs~load_msg_addr();
  
  var checker = ds~load_dict();
  ;;  Check if the sender address is used before
  (_, int flag) = checker.dict_get?(267, sender_address);
  if flag {
    return ();
  }

  ;;  Add to the dictionary if the address does not match
  (key, val, flag) = d~dict_set(267, sender_address, "");

  ;;  Check the seconds passed since the contract deployed
  if (contract_time_of_deployment + 600 < now()) {
    return (); 
  }

  ;;  Vote positive or negative
  if (op == 1) {
    positive += 1;
  }
  if (op == 0) {
    negative += 1;
  }

  ;;  Create a Builder for the future cell, write a value to it, from Builder create Cell, Write the resulting cell to the c4 register
  save_data(positive, negative, contract_time_of_deployment);
}


(int, int, int) get_total() method_id {
  var (positive, negative, contract_time_of_deployment) = load_data();
  return (positive, negative, contract_time_of_deployment);
}
